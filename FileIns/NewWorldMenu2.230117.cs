'From Squeak6.1alpha of 17 January 2023 [latest update: #22363] on 17 January 2023 at 1:04:12 pm'!Object subclass: #TheWorldMenu	instanceVariableNames: 'myProject myWorld myHand '	classVariableNames: 'OpenMenuRegistry ConvenientWorldMenu '	poolDictionaries: ''	category: 'Morphic-Kernel'!!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/11/2023 09:43'!addMiscEntries: menu 		self			fillIn: menu			from: {				{ 'projects...'. { self. #projectMenu } }.				{ 'authoring...'. { self. #authoringMenu } }.		}! !!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/17/2023 12:38'!addMiscOn: menu	self		fillIn: menu		from: {			{ 'help...'. { self. #helpDo }. 'puts up a menu of useful items for updating the system, determining what version you are running, and much else' }.			{ 'appearance...'. { self. #appearanceDo }. 'put up a menu offering many controls over appearance.' }. 			nil }.	myWorld addUndoItemsTo: menu.	self addRestoreDisplay: menu.	self addPrintAndDebug: menu! !!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/16/2023 17:03'!addObjectsAndTools: menu	self		fillIn: menu		from: {			nil.			{ 'Objects (o)'. { #myWorld. #activateObjectsTool }. 'A tool for finding and obtaining many kinds of objects' }.			{ 'New morph...'. { self. #newMorph }. 'Offers a variety of ways to create new objects' }.			nil.			{ 'Authoring tools...'. { self. #scriptingDo }. 'A menu of choices useful for authoring' }.			{ 'Playfield options...'. { self. #playfieldDo }. 'A menu of options pertaining to this object as viewed as a playfield' }.			{ 'Flaps...'. { self. #flapsDo }. 'A menu relating to use of flaps.  For best results, use "keep this menu up"' }.			{ 'Projects...'. { self. #projectDo }. 'A menu of commands relating to use of projects' }.			{ 'Telemorphic...' . {self. #remoteDo}.  'commands for doing multi-machine "telemorphic" experiments'}.			nil		}! !!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/16/2023 17:04'!addPrintAndDebug: menu	Preferences simpleMenus ifFalse: [		self			fillIn: menu			from: {				{ 'Make screenshot'. {self. #saveScreenshot}. 'makes a screenshot and saves it to disk'}.				"{ 'print PS to file...'. { self. #printWorldOnFile }. 'write the world into a postscript file' }."				{ 'Debug...'. { self. #debugDo }. 'a menu of debugging items' }			} ]! !!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/11/2023 09:37'!addProjectEntries	| menu |	menu := self menu: 'open...'.	menu defaultTarget: ToolSet default.	menu addList: ToolSet menuItems.	menu defaultTarget: self.	self		fillIn: menu		from: {			nil.			{ 'previous project'. { #myWorld. #goBack }. 'return to the most-recently-visited project' }.			{ 'jump to project...'. { #myWorld. #jumpToProject }. 'put up a list of all projects, letting me choose one to go to' }.			{ 'save project on file...'. { #myWorld. #saveOnFile }. 'save this project on a file' }.			{'load project from file...'. {self. #loadProject}. 'load a project from a file' }.			nil		}! !!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/16/2023 17:04'!addRestoreDisplay: menu	self		fillIn: menu		from: {			{'Restore display (r)'. { Project current. #restoreDisplay }. 'repaint the screen -- useful for removing unwanted display artifacts, lingering cursors, etc.' }.			nil		}! !!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/16/2023 17:04'!addSaveAndQuit: menu	self		fillIn: menu		from: {			nil.			{ 'Save'. { Smalltalk. #saveSession }. 'save the current version of the image on disk' }.			{ 'Save as...'. { Smalltalk. #saveAs }. 'save the current version of the image on disk under a new name.' }.			{ 'Save as new version'. { Smalltalk. #saveAsNewVersion }. 'give the current image a new version-stamped name and save it under that name on disk.' }.			{ 'Save and quit'. { self. #saveAndQuit }. 'save the current image on disk, and quit out of Squeak.' }.			{ 'Quit'. { self. #quitSession }. 'quit out of Squeak.' }		}! !!TheWorldMenu methodsFor: 'construction' stamp: 'mha 2/3/2009 16:43'!addUtilities: menu	Preferences simpleMenus ifFalse: [		self			fillIn: menu			from: {				{ 'open...'. { self. #openWindow } }.				{ 'windows...'. { self. #windowsDo } }.				{ 'changes...'. { self. #changesDo } }			} ].	self		fillIn: menu		from: {			{ 'help...'. { self. #helpDo }. 'puts up a menu of useful items for updating the system, determining what version you are running, and much else' }.			{ 'appearance...'. { self. #appearanceDo }. 'put up a menu offering many controls over appearance.' }		}.	Preferences simpleMenus ifFalse: [		self			fillIn: menu			from: {				{ 'do...'. { Utilities. #offerCommonRequests }. 'put up an editible list of convenient expressions, and evaluate the one selected.' }			} ]! !!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/11/2023 09:45'!authoringMenu	| menu |	menu := self menu: 'authoring...'.	menu defaultTarget: self.	self addObjectsAndTools: menu.	self doPopUp: menu! !!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/16/2023 16:42'!authoringMenuOn: menu	self addObjectsAndTools: menu.! !!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/17/2023 13:02'!buildWorldMenu	"Build the menu that is put up when the screen-desktop is clicked on"	| menu |	menu := MenuMorph new defaultTarget: self.	menu commandKeyHandler: self.	self colorForDebugging: menu.	menu addStayUpItem.	self fillIn: menu		from: {{'Restore display'. { Project current. #restoreDisplay }. 'repaint the screen -- useful for removing unwanted display artifacts, lingering cursors, etc.' }.				{ 'Save image'. { Smalltalk. #saveSession }. 'save the current version of the image on disk' } . nil}.					"Add the instant-open windows"	(self class convenientWorldMenu)		ifTrue: [self makeConvenient: menu.				menu addLine]		ifFalse: [menu addItem: [ :item | item contents: 'Tools'; subMenuUpdater: self selector: #makeConvenient: ]].					"Add the utilities"	menu addItem: [ :item | item contents: 'Open'; subMenuUpdater: self selector: #openMenu: ].	menu addItem: [ :item | item contents: 'Windows'; subMenuUpdater: self selector: #windowsMenuOn: ].	menu addItem: [ :item | item contents: 'Changes'; subMenuUpdater: self selector: #changesMenuOn: ].	Smalltalk at: #ServiceGUI ifPresent:[:sgui|		sgui worldMenu: menu.		sgui onlyServices ifTrue: [^ menu].	].	menu addItem: [ :item | item contents: 'Projects'; subMenuUpdater: self selector: #projectMenuOn: ].	menu addItem: [ :item | item contents: 'Authoring'; subMenuUpdater: self selector: #authoringMenuOn: ].	menu addItem: [ :item | item contents: 'Misc'; subMenuUpdater: self selector: #addMiscOn: ].		menu addItem: [ :item | item contents: 'Save/Quit'; subMenuUpdater: self selector: #addSaveAndQuit: ].	^ menu! !!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/16/2023 16:07'!buildWorldMenu0	"Build the menu that is put up when the screen-desktop is clicked on"	| menu |	menu := MenuMorph new defaultTarget: self.	menu commandKeyHandler: self.	self colorForDebugging: menu.	menu addStayUpItem.	self makeConvenient: menu.	self addUtilities: menu.	Smalltalk at: #ServiceGUI ifPresent:[:sgui|		sgui worldMenu: menu.		sgui onlyServices ifTrue: [^ menu].	].	self addMiscEntries: menu.	myWorld addUndoItemsTo: menu.	self addRestoreDisplay: menu.	self addPrintAndDebug: menu.	self addSaveAndQuit: menu.	^ menu! !!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/16/2023 17:01'!changesMenuOn: menu        "Build the changes menu for the world."        self fillIn: menu from: {                { 'File out current change set' . { ChangeSet current . #verboseFileOut}.                                'Write the current change set out to a file whose name reflects the change set name and the current date & time.'}.                { 'Create new change set...' . { ChangeSet . #newChangeSet}. 'Create a new change set and make it the current one.'}.                { 'Browse changed methods' . { ChangeSet  . #browseChangedMessages}.  'Open a message-list browser showing all methods in the current change set'}.                { 'Check change set for slips' . { self  . #lookForSlips}.                                'Check the current change set for halts, references to the Transcript, etc., and if any such thing is found, open up a message-list browser detailing all possible slips.'}.                nil.                { 'Simple change sorter' . {self. #openChangeSorter1}.  'Open a 3-paned changed-set viewing tool'}.                { 'Dual change sorter' . {self. #openChangeSorter2}.                                'Open a change sorter that shows you two change sets at a time, making it easy to copy and move methods and classes between them.'}.               { 'Find a change sorter (C)' . { #myWorld . #findAChangeSorter: }. 'Brings an open change sorter to the front, creating one if necessary, and makes it the active window'}.                nil.                { 'Browse recent submissions (R)' . { Utilities . #browseRecentSubmissions}.                                'Open a new recent-submissions browser.  A recent-submissions browser is a message-list browser that shows the most recent methods that have been submitted.  If you submit changes within that browser, it will keep up-to-date, always showing the most recent submissions.'}.			{ 'Browse my changes' . { SystemNavigation new . #browseMyChanges }.					'Browse all of my changes since the last time #condenseSources was run.'}.			nil.                { 'Recently logged changes...' . { self . #browseRecentLog}.'Open a change-list browser on the latter part of the changes log.  You can use this browser to recover logged changes which were not saved in your image, in the event of a crash or other interruption.'}.                { 'Recent log file...' . { Smalltalk . #writeRecentToFile}.                                'Create a file holding the logged changes (going as far back as you wish), and open a window on that file.'}.                nil.                { 'Save world as morph file' . {self. #saveWorldInFile}. 'Save a file that, when reloaded, reconstitutes the current World.'}.                nil.        }! !!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/16/2023 16:37'!makeConvenient: menu	self		fillIn: menu		from: {			{ 'Browser'. { StandardToolSet. #openClassBrowser }. 'open a browser' }.			{ 'Workspace'. { Workspace. #open }. 'open a workspace' }.			{ 'Transcript'. { Transcript. #open }. 'open a transcript' }.			{ 'File List'. { FileList. #open }. 'open a file list' }.			{ 'Method Finder'. { SelectorBrowser. #open }. 'open a selector finder' }.			{ 'Change Sorter'. { self. #openChangeSorter1 }. 'open a selector finder' }.			Smalltalk at: #TestRunner ifPresent: [ :aClass|				{ 'Test Runner'. { aClass. #open }. 'open a test runner' }.			] }! !!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/16/2023 16:58'!openMenu: menu	"Build the open window menu for the world."	self fillIn: menu from: {		{'File editor' . { self . #openFileDirectly} . 'Lets you open a window on a single file'}.		{'Transcript (t)' . {self . #openTranscript}. 'A window used to report messages sent to Transcript' }.		"{'inner world' . { WorldWindow . #test1} }."	}.	self fillIn: menu from: self class registeredOpenCommands.	menu addLine.	self mvcProjectsAllowed ifTrue:		[self fillIn: menu from: { {'MVC project' . {self. #openMVCProject} . 'Creates a new project of the classic "mvc" style'} }].	self fillIn: menu from: { 		{'Morphic project' . {self. #openMorphicProject} . 'Creates a new morphic project'}.	}.	Smalltalk at: #SMxMorphicProject ifPresent: [:p |		self fillIn: menu from: { 			{ 'Simple morphic project' . { self . #openSMxMorphicProject } . 'Creates a new simple morphic project' }.		}	].	! !!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/11/2023 09:41'!projectMenu	| menu |	menu := self menu: 'projects...'.	menu defaultTarget: self.	self		fillIn: menu		from: {			nil.			{ 'previous project'. { #myWorld. #goBack }. 'return to the most-recently-visited project' }.			{ 'jump to project...'. { #myWorld. #jumpToProject }. 'put up a list of all projects, letting me choose one to go to' }.			{ 'save project on file...'. { #myWorld. #saveOnFile }. 'save this project on a file' }.			{'load project from file...'. {self. #loadProject}. 'load a project from a file' }.			nil		}.	self doPopUp: menu! !!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/16/2023 17:02'!projectMenuOn: menu	self		fillIn: menu		from: {			nil.			{ 'Previous project'. { #myWorld. #goBack }. 'return to the most-recently-visited project' }.			{ 'Jump to project...'. { #myWorld. #jumpToProject }. 'put up a list of all projects, letting me choose one to go to' }.			{ 'Save project on file...'. { #myWorld. #saveOnFile }. 'save this project on a file' }.			{'Load project from file...'. {self. #loadProject}. 'load a project from a file' }.			nil		}.	! !!TheWorldMenu methodsFor: 'windows & flaps menu' stamp: 'stp 1/16/2023 16:59'!windowsMenuOn: menu        "Build the windows menu for the world."        ^ self fillIn: menu from: {                  { 'Find window' translatedNoop. { #myWorld . #findWindow: }. 'Presents a list of all windows; if you choose one from the list, it becomes the active window.' translatedNoop}.                { 'Find changed browsers...' translatedNoop. { #myWorld . #findDirtyBrowsers: }. 'Presents a list of browsers that have unsubmitted changes; if you choose one from the list, it becomes the active window.' translatedNoop}.                { 'Find changed windows...' translatedNoop. { #myWorld . #findDirtyWindows: }. 'Presents a list of all windows that have unsubmitted changes; if you choose one from the list, it becomes the active window.' translatedNoop}.			nil.                { 'Find a transcript (t)' translatedNoop. { #myWorld . #findATranscript: }. 'Brings an open Transcript to the front, creating one if necessary, and makes it the active window' translatedNoop}.               { 'Find a fileList (L)' translatedNoop. { #myWorld . #findAFileList: }. 'Brings an open fileList to the front, creating one if necessary, and makes it the active window' translatedNoop}.               { 'Find a change sorter (C)' translatedNoop. { #myWorld . #findAChangeSorter: }. 'Brings an open change sorter to the front, creating one if necessary, and makes it the active window' translatedNoop}.			{ 'Find message names (W)' translatedNoop. { #myWorld . #findAMessageNamesWindow: }. 'Brings an open MessageNames window to the front, creating one if necessary, and makes it the active window' translatedNoop}.			 nil.                { #staggerPolicyString . { self . #toggleWindowPolicy }. 'stagger: new windows positioned so you can see a portion of each one.                tile: new windows positioned so that they do not overlap others, if possible.' translatedNoop}.                nil.                { 'Collapse all windows' translatedNoop. { #myWorld . #collapseAll }. 'Reduce all open windows to collapsed forms that only show titles.' translatedNoop}.                { 'Expand all' translatedNoop. { #myWorld . #expandAll }. 'Expand all collapsed windows and other collapsed objects back to their expanded forms.' translatedNoop}.		                { 'Close top window (w)' translatedNoop. { SystemWindow . #closeTopWindow }. 'Close the topmost window if possible.' translatedNoop}.                { 'Send top window to back (\)' translatedNoop. { SystemWindow . #sendTopWindowToBack  }. 'Make the topmost window become the backmost one, and activate the window just beneath it.' translatedNoop}.			 { 'Move windows onscreen' translatedNoop. { #myWorld . #bringWindowsFullOnscreen }. 'Make all windows fully visible on the screen' translatedNoop}.                nil.                { 'Delete unchanged windows' translatedNoop. { #myWorld . #closeUnchangedWindows }. 'Deletes all windows that do not have unsaved text edits.' translatedNoop}.                { 'Delete non-windows' translatedNoop. { #myWorld . #deleteNonWindows }. 'Deletes all non-window morphs lying on the world.' translatedNoop}.                { 'Delete both of the above' translatedNoop. { self . #cleanUpWorld }. 'deletes all unchanged windows and also all non-window morphs lying on the world, other than flaps.' translatedNoop}.        }! !!TheWorldMenu class methodsFor: 'class initialization' stamp: 'stp 1/17/2023 13:03'!initialize	"Establish the class vars for the world menu"	"TheWorldMenu initialize"		ConvenientWorldMenu := true! !!TheWorldMenu class methodsFor: 'preferences' stamp: 'stp 1/17/2023 12:59'!convenientWorldMenu	<preference: 'Put convenience tools in world menu'		categoryList: #(browsing Accessibility)		description: 'When enabled, The convenience menu items to open the standard tools are placed directly in the WorldMenu, rather than in a sub-menu.'		type: #Boolean>        ^ ConvenientWorldMenu ifNil: [false]! !TheWorldMenu initialize!

'From Squeak6.1alpha of 17 January 2023 [latest update: #22363] on 17 January 2023 at 4:37:44 pm'!!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/17/2023 16:19'!addUtilities: menu	Preferences simpleMenus ifFalse: [		self			fillIn: menu			from: {				{ 'open...'. { self. #openWindow } }.				{ 'windows...'. { self. #windowsDo } }.				{ 'changes...'. { self. #changesDo } }			} ].	self		fillIn: menu		from: {			{ 'help...'. { self. #helpDo }. 				'puts up a menu of useful items for updating the system, determining what version you are running, and much else' }.			{ 'appearance...'. { self. #appearanceDo }. 					'put up a menu offering many controls over appearance.' }		}.	Preferences simpleMenus ifFalse: [		self			fillIn: menu			from: {				{ 'do...'. { Utilities offerCommonRequestsInMorphicOn: menu }. 					'put up an editible list of convenient expressions, and evaluate the one selected.' }			} ]! !!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/17/2023 16:35'!buildWorldMenu	"Build the menu that is put up when the screen-desktop is clicked on"	| menu |	menu := MenuMorph new defaultTarget: self.	menu commandKeyHandler: self.	self colorForDebugging: menu.	menu addStayUpItem.	self fillIn: menu		from: {{'Restore display'. { Project current. #restoreDisplay }. 'repaint the screen -- useful for removing unwanted display artifacts, lingering cursors, etc.' }.				{ 'Save image'. { Smalltalk. #saveSession }. 'save the current version of the image on disk' } . nil}.					"Add the instant-open windows - in-line or as a submenu"	(self class convenientWorldMenu)				"system pref as class var"		ifTrue: [self makeConvenient: menu.		"conv menu in-line"				menu addLine]		ifFalse: [menu addItem: [ :item | 			"conv sub-menu"							item contents: 'Tools'; subMenuUpdater: self selector: #makeConvenient: ]].					"Add the utilities"	menu addItem: [ :item | item contents: 'Open'; subMenuUpdater: self selector: #openMenu: ].	menu addItem: [ :item | item contents: 'Windows'; subMenuUpdater: self selector: #windowsMenuOn: ].	menu addItem: [ :item | item contents: 'Changes'; subMenuUpdater: self selector: #changesMenuOn: ].	Smalltalk at: #ServiceGUI ifPresent:[:sgui|		sgui worldMenu: menu.		sgui onlyServices ifTrue: [^ menu].	].	menu addItem: [ :item | item contents: 'Do...'; subMenuUpdater: self selector: #doMenuOn: ].	menu addItem: [ :item | item contents: 'Projects'; subMenuUpdater: self selector: #projectMenuOn: ].	menu addLine.	menu addItem: [ :item | item contents: 'Authoring'; subMenuUpdater: self selector: #authoringMenuOn: ].	menu addItem: [ :item | item contents: 'Misc'; subMenuUpdater: self selector: #addMiscOn: ].		menu addItem: [ :item | item contents: 'Save/Quit'; subMenuUpdater: self selector: #addSaveAndQuit: ].	^ menu! !!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/17/2023 16:23'!doMenuOn: menu        "Build the changes menu for the world."        Utilities offerCommonRequestsInMorphicOn: menu! !!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/17/2023 16:24'!makeConvenient: menu	self		fillIn: menu		from: {			{ 'Browser'. { StandardToolSet. #openClassBrowser }. 'open a browser' }.			{ 'Workspace'. { Workspace. #open }. 'open a workspace' }.			{ 'Transcript'. { Transcript. #open }. 'open a transcript' }.			{ 'File List'. { FileList. #open }. 'open a file list' }.			{ 'Method Finder'. { SelectorBrowser. #open }. 'open a selector finder' }.			{ 'Change Sorter'. { self. #openChangeSorter1 }. 'open a selector finder' } }	! !!TheWorldMenu methodsFor: 'construction' stamp: 'stp 1/17/2023 16:31'!openMenu: menu	"Build the open window menu for the world."	self fillIn: menu from: {		{'File editor' . { self . #openFileDirectly } . 'Lets you open a window on a single file'}.		{'Transcript (t)' . { self . #openTranscript } . 'A window used to report messages sent to Transcript' }.		{'Process Browser' . { ProcessBrowser . #open } . 'Open a Process Browser' }.		Smalltalk at: #TestRunner ifPresent: [ :aClass | { 'Test Runner'. { aClass. #open }. 'open a test runner' } ] } .		menu addLine.	self mvcProjectsAllowed ifTrue:		[self fillIn: menu from: { {'MVC project' . {self. #openMVCProject} . 'Creates a new project of the classic "mvc" style'} } ].	self fillIn: menu from: { 		{'Morphic project' . {self. #openMorphicProject} . 'Creates a new morphic project'} }.		Smalltalk at: #SMxMorphicProject ifPresent: [ :p |		self fillIn: menu from: { 			{ 'Simple morphic project' . { self . #openSMxMorphicProject } . 'Creates a new simple morphic project' }.		} ].	menu addLine.	self fillIn: menu from: self class registeredOpenCommands.! !!Utilities class methodsFor: 'common requests' stamp: 'stp 1/17/2023 16:17'!offerCommonRequestsInMorphicOn: aMenu	"Offer up the common-requests menu.  If the user chooses one, then evaluate it, and 
		-- provided the value is a number or string -- show it in the Transcript."	"Utilities offerCommonRequests"	| strings |	(CommonRequestStrings == nil or: [CommonRequestStrings isKindOf: Array])		ifTrue: [self initializeCommonRequestStrings].	strings := CommonRequestStrings contents.	aMenu title: 'Common Requests' translated.	aMenu addStayUpItem.	strings asString linesDo:		[ :aString |			aString = '-'				ifTrue:					[aMenu addLine]				ifFalse:					[aMenu add: (aString ifEmpty: [' ']) target: self selector: #eval: argument: aString]].	aMenu addLine.	aMenu add: 'edit this list' translated target: self action: #editCommonRequestStrings.! !