Your Basic Siren Demo Script

To use this demo script, read through the text selecting the blocks enclosed in square brackets. The single character after the close-square-bracket (d, p,  i, I, b or db) denotes whether you should "do," "print," "inspect," "explore" or "debug" the block.  The command key map looks like:	cmd-d = do-it			Execute the selection	cmd-p = print-it		Execute the selection and print the result	cmd-i = inspect-it		Execute the selection and inspect the result	cmd-I = explore-it	Execute the selection and explore the result (an alternative inspector)	cmd-D = debug-it		Open a debugger on the expression so you can single-step through it	cmd-b = browse-it	Browse the code of the expressionTo look at the code for the complex examples below, simply "debug-it" and single-step into the demo method.

For the function and event list examples below, note that the "open" method edits the receiver by default; if you hold down <SHIFT> while executing it, it will play the receiver, and if you hold down <CTRL> is will inspect the receiver.

If you're new to reading Smalltalk, look at the workbook section on "Learning to Read Smalltalk." If you're setting up Siren for the first time, see the section above on "Siren Set-up and Testing" and make certain you know how to use the Siren Utility panel and the Siren Transport view.

Set-up

Configure and test the MIDI and sound I/O drivers using the utility panel.

	[SirenSession openUtilityVert] d

See the section above on "Siren Set-up."
=====================================================================
MusicMagnitudes

Print these to see what kinds of music magnitude representations and operations are supported.

	[440 Hz asSymbol] p			"--> 'a3' pitch"
	[(1/4 beat) asMsec] p			"--> 250 msec"
	[#mf ampl asMIDI] p			"--> 70 vel"
	[-16 dB asRatio value] p		"--> 0.158489"
MusicMagnitude operations
	['a4' pitch asMIDI] p
	[('a4' pitch + 100 Hz) asMIDI] p
	[('a4' pitch + 100 Hz) asFracMIDI] p
	['mp' ampl + 3 dB] p
	[('mp' ampl + 3 dB) asMIDI] p
	[(1/2 beat) + 100 msec] p

Pitch expressions ("N" is short-hand for PitchClass)

	[N C sharp sharp] p
	[N C augmentedFourth] p
	[N C diminishedThirteenth] p
	[N do flat intervalBetween: N sol] p
	[PitchClass D flat melodicMinorScale notes] p
	[(HungarianMinor root: N fa) asPitchesInOctave: 3] p
	[(BohlenPierceScale root: N mi) notes] p  	"non-well-tempered pitch class"=====================================================================
Event Creation Messages

Create a `generic' event using a class instance creation message.

	MusicEvent duration: 1/4 pitch: 'c3' ampl: 'mf' 

Create one with added properties.

	[(MusicEvent dur: 1/4 pitch: 'c3') color: #green; accent: #sfz ]

Terse format: concatenation (with ',') of music magnitudes

	[440 Hz, (1/4 beat), 44 dB] i
	[(#c4 pitch, 0.21 sec, 64 velocity) voice: Voice default] I
=====================================================================
Event Lists

Verbose form using a class instance creation message; 
a chord is simply a set of events at the same time.

	(EventList newNamed: #Chord1)
		add: ((1/2  beat), 'd3'  pitch,  'mf' ampl)  at: 0;
		add: ((1/2  beat), 'fs3'  pitch, 'mf' ampl)  at: 0;
		add: ((1/2  beat), 'a4'   pitch, 'mf' ampl)  at: 0

Open an editor on a scale created with a class message.

	[(EventList scaleFrom: 60 to: 72 in: 3000) open] d

Create 64 random events with parameters in the given ranges, play it on the default output voice, or edit it.

	[(EventList randomExample: 64 			"make 64 notes"
		from: ((#duration: -> (50 to: 200)),	"duration range in msec"
				(#pitch: -> (36 to: 60)),		"pitch range in MIDI keys"
				(#ampl: -> (48 to: 120)),		"amplitude range in MIDI velocities"
				(#voice: -> (1 to: 2)))			"play all on voice 1"
		) editPTV] d							"open an pitch-time view on the list"

Create an event list of 20 notes with semi-random values and play it on an OSC output voice.

	[(EventList randomExample: 20) playOn: OSCVoice default] d

Event lists don't have to have pitches at all, as in the following word,

	[EventList named: 'phrase1'  									"name it and it becomes persistent"
		fromSelectors: #(duration: loudness: phoneme:)		"3 parameters"
		values: (Array with: #(595 545 545 540 570 800 540) 	"3 value arrays"
					with: #(0.8 0.4 0.5 0.3 0.2 0.7 0.1) 
					with: #(#dun #kel #kam #mer #ge #sprae #che)).
	EventList named: 'phrase1'] i

Play two-voice "counterpoint" on the Csound note list score file voices.

	[ | vox list |
	vox := CsoundVoice onFileNamed: 'test.cs'.
	list := (EventList newNamed: #pRand)
			addAll: (EventList randomExample: 20);
			addAll: (EventList randomExample: 20).
	vox play: list.
	vox close.
	(FileStream fileNamed: 'test.cs') edit] d

Here's another example of creating a simple melody with a terse format

	[(EventList named: 'melody'  
		fromSelectors: #(pitch: duration: ampl:)
		values: (Array with: #(c d e f g) 
					with: #(2 4 4 2 2) reciprocal
					with: #(1))) open] d

You can also create event lists with snippets of code such as the following 2-octave whole-tone scale.

	[ | elist |
	elist := EventList newAnonymous.
	0 to: 12 do:
		[ :index |
		elist add: (1/4  beat, (index * 2 + 60) key,  'mf' ampl)].
	elist open ] d

Event lists can also be nested into arbitrary structures, as in the following group of four sub-groups

	[ (EventList newNamed: 'Hierarchical/4Groups')
		add: (EventList randomExample: 8 
			from: ((#duration: -> (125 to: 250)), (#pitch: -> (36 to: 40)), (#ampl: -> #(110)))) at: 0;
		add: (EventList randomExample: 8 
			from: ((#duration: -> (125 to: 250)), (#pitch: -> (40 to: 44)), (#ampl: -> #(100)))) at: 2;
		add: (EventList randomExample: 8 
			from: ((#duration: -> (125 to: 250)), (#pitch: -> (44 to: 48)), (#ampl: -> #(80)))) at: 4;
		add: (EventList randomExample: 8
			from: ((#duration: -> (125 to: 250)), (#pitch: -> (48 to: 52)), (#ampl: -> #(70)))) at: 6;
		editPTV ] d

Smalltalk methods can also process event lists, as in this code to increase the durations of the last notes in each of the groups from the previous example.

	[ (EventList named: 'Hierarchical/4Groups') eventsDo: 
		[ :sublist | | evnt |							"Remember: this is hierarchical, to the events are the sub-groups"
		evnt := sublist events last event.			"get the first note of each group"
		evnt duration: evnt duration * 8].		"multiply the duration by 4"
	(EventList named: 'Hierarchical/4Groups') open ] d

...or the following to take the scale and make it slow down

	[ | elist |
	elist := EventList scaleFrom: 60 to: 36 in: 2.5. 
	1 to: elist size do: 
		[ :index | | assoc |
		assoc := elist events at: index.
		assoc key: (assoc key * (1 + (index / elist events size)))].
	elist editPTV ] d
=====================================================================EventGeneratorsA cluster is the simplest event generator.	[(Cluster  dur: 2.0		pitchSet: #(48 50 52 54 56)		ampl: 50		voice: 1) edit] dChord object can give you an event list.	[((Chord majorTetradOn: 'f2' inversion: 0) duration: 1.0) edit] dCreate and play a simple drum roll--another 1-D event generator.	[((Roll length: 2000 rhythm: 50 note: 60) ampl: 80) open] dCreate and edit a low 6 second stochastic cloud with 5 events per second.	[ | c |	c := (Cloud dur: 6 sec		"lasts 6 sec."		pitch: (60 to: 72)  		"with pitches in this range"		ampl: (80 to: 120) 		"and amplitudes in this range"		voice: (1 to: 1)			"select from these voices"		density: 5) eventList.	"play 5 notes per sec. and get the event list"	c open] dPlay a 6-second cloud that goes from low to high and soft to loud.	[(DynamicCloud  dur: 6 sec		pitch: #((30 to: 44) (50 to: 50))	"given starting and ending selection ranges"		ampl: #((20 to: 20) (90 to: 120))		voice: (1 to: 4)		density: 10)  open] dSelect notes from a given scale	[(SelectionCloud dur: 4 sec 		pitch: ((NeapolitanMinor root: N do) asPitchesInOctave: 4)		ampl: #(80 40 120)		voice: #(1)		density: 12) open] dPlay a selection cloud that makes a transition from one triad to another.	[(DynamicSelectionCloud dur: 6 sec		pitch: #( #(48 50 52) #(72 74 76) )	"starting and ending pitch sets"		ampl: #(60 80 120)		voice: #(1)		density: 12) open] dThe extended DynamicSelectionCloud uses a multi-part pitch set  of the format (time -> chord) (time -> chord) ... as in the following example.	[ | score chords list |								"generate the tetrads from the selected scale; scramble the order"	chords := ((NeapolitanMinor root: N do) generateChordsPoly: 4 inOctave: 2) shuffled.	list := OrderedCollection new.	1 to: 7 do:		[ :ind |											"shift every other one up 2 octaves"		ind even ifTrue: [list add: ((ind - 1) * 3 -> ((chords at: ind) collect: [ :no | no + 24]))]			ifFalse: [list add: ((ind - 1) * 3 -> (chords at: ind))]].	score := (ExtDynamicSelectionCloud dur: 8		"now make a cloud from these"		pitch: list		ampl: 60		voice: nil		density: 10) eventList.	score eventsDo: 									"plug in the properties for FM"		[ :ev |			ev inst: '/i1/pn'.		ev modIndex: 2.0.		ev ratio: 1.02.		ev pos: 0.0].	SirenSession eventList: 'EvGens/dsCloud1' put: score.	score open] dMark Lentczner's bell peals ring the changes.	[(Peal upon: #(60 65 68 72)) eventList open] dOther EvGen examples (do these and/or browse them to see what's going on)	[HauerSteffensView cloudExample]	[HauerSteffensView cloudsExample]	[HauerSteffensView cloudsExample2]	[DynamicCloud focusExample]	[HauerSteffensView scaleExample]	[HauerSteffensView scaleExample2]	[HauerSteffensView randomExampleQ]	[ExtDynamicSelectionCloud chordExample]	[(Peal upon: #(60 62 64 65)) eventList editPTV]	[Arpeggio example1]				 "Plays midi"	[ExtDynamicSelectionCloud chordExample]	[ExtDynamicSelectionCloud chordExample2]Score11See the above description of Score11; most of the examples play via MIDI or OSC	[Score11 chorale1] d	[Score11 melody1] d	[Score11 sleepingSword1] b=====================================================================EventModifiersOne can apply functions to the properties of event lists, as in the following example, which creates a drum roll and applies a decrescendo modifier (fcn goes from 0 to 1) to it.	[ | roll decresc |	roll := ((Roll length: 3000 rhythm: 150 note: 60) ampl: 120) eventList.	decresc := Swell new function: (ExponentialFunction from: #((0 1 4) (1 0))).	decresc applyTo: roll.	roll editPTV]=====================================================================Functions and ControlBasic ramp up/down (linear and exponential flavors)	[(LinearFunction from: #((0 0) (0.5 1) (1 0))) at: 0.25] p	[(ExponentialFunction from: #((0 0 5) (0.5 1 -5) (1 0))) at: 0.25 ] pADSR-like envelopes	[(LinearFunction from: #((0 0) (0.03 1) (0.06 0.7) (0.9 0.5) (1 0))) edit]	[(ExponentialFunction from: #((0 0 5) (0.02 1 -25) (0.8 0.25 -2) (1 0))) edit]Open a view with a linear envelope, an exponential envelope, a spline curve, and a sum-of-sines function	[FunctionView multiFunctionExample]Load LPC tracking data from a file	[FunctionView onFunctions: (Function fromFile: 'G1.2a1.env') normalize: #(false true true)] dOne can apply a function to any property of an event list, as in the example below, which makes a crescendo/decrescendo using an exponential triangle function.	[ | list fcn |	list := EventList newNamed: #test3.	(0 to: 4000 by: 100) do: 		"4 seconds, 10 notes per second"			[ :index |				"add the same note"			list add: (MusicEvent dur: 100 pitch: 60 ampl: 120) at: index].									"create the fade-in/out triangle function"	fcn := ExponentialFunction from: #((0 0.05 1) (0.5 1 -1) (1 0.05)).									"and apply it to the event list"	list applyFunction: fcn to: #loudness.	list editPTV] dSend function data values out as regular OSC messages	[OSCVoice functionExample] b=====================================================================Voices and I/O	[CsoundVoice randomExampleToFileAndEdit]	[SuperColliderVoice randomExampleToFileAndEdit]	[(EventList randomExample: 20) playOn: MIDIVoice default]	[OSCVoice midiScaleExample]These use the CSL OSC servers	[OSCVoice fmExample1]	[OSCVoice sndExample1]These examples loop endlessly, so you have to interrupt or flush the scheduler to stop them	[OSCVoice fmExample2. 		5 wait.	OSCVoice sndExample2.		5 wait.	OSCVoice fmExample4]	[EventScheduler flush]As an example that mixes styles, the following expression plays a long low FM note and then uses Siren function objects to send continuous controls to make the note glissando down and pan from left to right.	[OSCVoice fmExample3]=====================================================================MIDI ControlTalk directly to the MIDI Driver for low-0level queries	[PortMIDILibrary pm_count_devices ] p	[PortMIDILibrary pm_default_input_device ] p	[PortMIDILibrary pm_default_output_device ] p	[PortMIDIPort listDeviceTable] d			"prints to Transcript"Simple examples	[MIDIVoice scaleExample]	[MIDIVoice randomExample]Open MIDI, play notes based on the mouse position (x --> dur; y --> pitch) until mouse down.	[MIDIPort testMouseMIDI] dDemonstrate program change by setting up an organ instrument to play on.	[MIDIPort testProgramChange] dDown-load a general MIDI patch for a 16-voice percussion ensemble.	[MIDIPort setupTunedPercussion. MIDIPort testAScale] dReset the GM map (removed, see old code file-ins)	[MIDIPort resetEnsemble]Demonstrate control commands by playing a note and making a crescendo with the volume pedal.	[MIDIPort testControlContinuous] dDemonstrate pitch-bend by playing two notes and bending them.	[MIDIPort testBend] dANO	[MIDIPort allNotesOff]Close down and clean up.	[MIDIPort cleanUp]MIDI Tests	PortMIDILibrary pm_test: PortMIDILibrary new pm_default_output_device 	[PortMIDILibrary testAllNotes]	[ExternalLibrary clearAllCaches.]	[PortMIDILibrary pm_terminate]	Various verbose MIDIVoice creation methods	[EventList scaleExample1 playOn: (MIDIVoice defaultOut: 1)]	[EventList scaleExample1 playOn: (MIDIVoice onDeviceNamed: 'Kontakt' channel: 3)]	[EventList scaleExample1 playOn: (MIDIVoice onDeviceNamed: 'Nord' channel: 1)]	[EventList scaleExample1 playOn: (MIDIVoice on: 			(MIDIDevice 				outOn: (PortMIDIPort indexOfOutNamed: '*Kontakt*') 				port: MIDIPort concreteClass default) 			channel: 3)]	[PortMIDIPort streams]=====================================================================OpenSoundSontrol - OSCThe OSC examples assume you've got an OSC-based server (e.g., CSL or SuperCollider) listening on some port; see the doc above to the recommended instrument library.	[OSCVoice fmExample1]	[OSCVoice fmExample2]	[OSCVoice pluckExample1]	[OSCVoice sndExample1]	[OSCVoice sndExample2]	[OSCVoice sharcExample1]	[OSCVoice bellExample1]	[OSCVoice vSOSExample1]	[OSCVoice granulatorExample1]	[OSCVoice granulatorExample2: 1]Roll timing tests	[((Roll length: 6 sec rhythm: 60 note: 72) ampl: 100) eventList asSoundScore play]	[((Roll length: 6 sec rhythm: 60 note: 72) ampl: 100) eventList playOn: MIDIVoice default]	[((Roll length: 6 sec rhythm: 60 note: 72) ampl: 100) eventList 					playOn: (OSCVoice cslHost: pMapForCSLSimpleFM)]=====================================================================Storage and Persistency

	"SirenSession eventList: 'piece1/mvmnt1/part1' put: EventList new"
	"SirenSession eventList: 'piece1/mvmnt1/part1'"
=====================================================================
Siren Scheduler

Reset
	[EventScheduler initialize]

Here's how to use the event scheduler explicitly.

	[EventScheduler instance addClient: (EventList randomExample: 20) in: (500 msec).
	EventScheduler instance run] d

Flush and close down the scheduler

	[EventScheduler instance interrupt; flush] d

Action events have arbitrary blocks of Smalltalk code as their "actions." This example creates a list of action events that flash random screen rectangles.

	[ActionEvent playExample] d

Complex Multimedia Example

	[ | el |
	el := (Cloud  dur: 6				"Create a 6-second stochastic cloud"
		pitch: (48 to: 60)				"choose pitches in this range"
		ampl: (40 to: 70) 				"choose amplitudes in this range"
		voice: #(1)						"leave the 1 nil for now"
		density: 5) eventList.			"play 5 notes per sec. and get the events"
	1 to: el events size do:				"Now plug different voices in to the events"
		[ :ind | 							"ind is the counter"
		(el events at: ind) event voice: 
			(ind odd 					"alternate between two voices"
				ifTrue: [MIDIVoice default] 
				ifFalse: [OSCVoice default])].
										"add some animation events"
	el addAll: ActionEvent listExample.
	el open] d							"and play the merged event list"
=====================================================================Squeak-native SoundCreate and view some example sounds using the Squeak-native sound facilitiesPlay a scale on an FM synthesis instrument (2 methods)	[(FMSound lowMajorScaleOn: FMSound bassoon1) play] d	[(EventList scaleFrom: 48 to: 60 in: 1.5) asSoundScore play] dMix several different instruments	[ | sco voxs | 		sco := EventList scaleFrom: 48 to: 72 in: 4.5.		voxs := Array with: FMSound oboe1 with: FMSound brass1 				with: FMSound marimba with: PluckedSound default.		sco eventsDo: [ :ev |			ev voice: voxs atRandom].		sco asSoundScore play] dRead in a sound from a file and view it	[(SampledSound fromAIFFfileNamed: 'Siren9C/Data/unbelichtet.aiff') viewSamples] dDisplay a tiny sonogram in the upper-left of the screen (It's a raw morph, so you have to ctrl-click on it and say "delete" to dismiss it)	[ | snd | snd := SampledSound fromAIFFfileNamed: 'Siren9C/Data/unbelichtet.aiff'.	snd currentWorld addMorph: (snd sonogramMorph: 32 from: 1 to: snd count nPoints: 256)]=====================================================================
The Siren Graphics Framework

Display rectangles in a display list view -- test zoom and scroll.

	[DisplayList rectangleExample]

Display random strings or other visuals

	[DisplayList stringExample]
	[DisplayListView exampleLines]	[DisplayListView examplePolylines]	[DisplayListView exampleVisuals]
Large or complicated display lists	[DisplayRectangle rectangleExample2]		"slow - uses rotated rects"	[(DisplayList stringsX: 6000 byY: 10000) display]	[DisplayListView exampleMixed]			"huge display list - takes a while"	[DisplayList exampleHierarchical display]Show the result of the IndentedListLayoutManager
	 [IndentedListLayoutManager colorListExample display] d	(Note that color denotes species in this example: red for durations, green for pitches, blue for amplitudes, etc.)To view the same structure as a tree-like layout, use an IndentedTreeLayoutManager, as in,	[IndentedTreeLayoutManager listExample display] d
Music Notations

Open a sequence view on a random event list.

	[TimeSequenceView randomExample] d

Try the picth-time layout

	[PitchTimeView randomExample] d
	[PitchTimeView openOnEventList: (EventList scaleFrom: 48 to: 84 in: 6)] d

Open a pitch/time view on a *very long* 3-stream event list.

	[PitchTimeView randomExampleLong] d

A more complete example is Hauer-Steffens notation, which has a clef and staff lines as in common-practise 
notation.
	[HauerSteffensView randomExample] d
	[(EventList scaleFrom: 40 to: 66 in: 6) edit] d
