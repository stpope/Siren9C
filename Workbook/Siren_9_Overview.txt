What is Siren?

The Siren system is a software framework for music and sound composition, processing, performance, and analysis; it is a collection of 200-350 classes (depending on which version and platform you're using) written in Smalltalk-80 (40 kLOC or so). Siren 9C works on Squeak Smalltalk (https://squeak.org) and (to varying degrees) on the Cuis and VisualWorks Smalltalk implementations. Siren-on-Squeak supports streaming I/O via OpenSoundControl (OSC), MIDI, and multi-channel audio ports.  Siren-on-Cuis supports the GUI tools, but not the full MIDI I/O facilities.  Squeak is expected to be the main platform for on-going development.

The Siren release is available via the web from the URL https://github.com/stpope/Siren9C.  Note that you need a Squeak Smalltalk virtual machine and run-time to use Siren; you can get one of these for your desired host platform from https://github.com/OpenSmalltalk/opensmalltalk-vm/releases.  If you want to use the MIDI I/O, you'll need a compiled file of the MIDI primitives for your platform; the C-language source for these is included with the release, as is a compiled library for M1-based Macs (libportmidi.2.0.3.dylib).

Siren is a programming framework and tool kit; the intended audience is Smalltalk developers, or users willing to learn Smalltalk in order to write their own applications. The built-in applications are meant as demonstrations of the use of the libraries, rather than as end-user applications. Siren is not a MIDI sequencer, nor a score notation editor, through both of these applications would be straightforward to implement with the Siren framework.

There are several elements to Siren:
	1. The Smoke music representation language
		(object models for music magnitudes, events, event lists, generators, functions, and sounds);
	2. Voices, schedulers and I/O drivers
		(real-time and file-based "voice" objects for sound, score file, OSC, and MIDI I/O);
	3. User interface components for musical applications
		(a music/audio UI framework, tools, and widgets);
	4. Several built-in applications 
		(editors and browsers for Smoke objects); and
	5. External library interfaces for streaming I/O and DSP math
		(sound/MIDI/OSC I/O, fast FFT, CSL & Loris sound analysis/resynthesis packages )

Each of these components is described below in its own section of this document.

If you can read a bit of Smalltalk and want a quick tour before proceeding, read the condensed "Siren Demo Script" that's on page 32 of this outline.

Where's More Documentation?

Siren and its predecessors and components (ARA, DoubleTalk, HyperScore ToolKit, and MODE) are documented in several extended book chapters and articles:
	-- "Squeak: Open Personal Computing and Multimedia" (Mark Guzdial and Kim 
		Rose, eds, Prentice-Hall, 2002);
	--  "Musical Signal Processing" (C. Roads, S. T. Pope, G. DePoli, and A. Piccialli, 
		eds. Swets & Zeitlinger, 1997);
	--  "The Interim DynaPiano" in "Computer Music Journal" 16:3, Fall, 1992 
		(also on the CMJ Web site);
	-- "The Well-Tempered Object: Musical Applications of Object-Oriented Software 
		Technology" (S. T. Pope, ed. MIT Press, 1991); and the 
	-- Proceedings of the 1986, 1987, 1989, 1991, 1992, 1994, 1996, 1997, 2003 and 2022
		International Computer Music Conferences (ICMCs).

Mny more MODE- and Smoke-related documents (including the above references) are available in the Doc folder of this release or as PDF files on the page http://HeavenEverywhere.com/stp/publs.html.

The official Siren home pages are,
	http://FASTLabInc.com/Sirenand	https://github.com/stpope/Siren9C

Here are the on-line Docs: the best in-depth doc (book chapter) is in,
	http://FASTLabInc.com/Siren/Doc/SirenBookChapter.pdf

The read the demo code workbook (this text), go to,
	http://FASTLabInc.com/Siren/Siren9C.Workbook.html

If you like to read manuals, take a look at the auto-generated Siren 7.5 manual,
	http://FASTLabInc.com/Siren/Manual

Watch the detailed Siren demos at,
	https://vimeo.com/120751122
	https://vimeo.com/421319630

History

Siren and its predecessors stem from music systems that I've developed in the process of composing and realizing my music. Of the early ancestors, the MShell (1980-83) was the score processing shell used for "4" (1980-82); ARA (1982-4) was an outgrowth of the Lisp system used for "Bat out of Hell" (1983); the DoubleTalk system (1984-7) was based on the Smalltalk-80-based Petri net editing system used for "Requiem Aeternam dona Eis" (1986); the HyperScore ToolKit's various versions (1986-90) were used (among others) for "Day" (1988), and the MODE (1990-96) was developed to realize "Kombination XI" (1990) and "Paragraph 31: All Gates are Open" (1993).

Siren-on-Squeak (1996-2002) was a simple re-implementation of the MODE in the Squeak version of Smalltalk; it added the representations and tools I needed for "Four Magic Sentences" (1998-2000).  Siren 7.4 added tools from the realizations of "Eternal Dream" (2002) and "Leur Songe de la Paix" (2003).  The newest release incorporates new code from "Jerusalem's Secrets" and "Ora penso invece che il mondo..." (2005-6), which are both components of "Secrets, Dreams, Fiath and Wonder (2000-18).  In each of these cases, some amount of effort was spent--after the completion of the composition--to make the tools more general-purpose. 

Portability

The Smalltalk portion of Siren is 100% cross-platform, and the external interfaces to sound file, MIDI, and sound streaming I/O use cross-platform libraries. There are a few places (aubio, SHARC interfaces) that assume UNIX shell commands can be run from within Smalltalk; I'm not certain how these port to Windows.

The core of Siren is not dependent on the dialect of Smalltalk, and in fact, runs well in Squeak, VisualWorks and Cuis. The bulk of the interactive tools and GUIs are based on my own display list graphics framework, and are thus also portable. The actual integrated applications and GUIs in Siren 9.0 used VisualWorks-specific application model classes, though.  The porting of the GUIs to Squeak is in-progress at the time of this writing.
