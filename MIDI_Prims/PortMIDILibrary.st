'From Squeak6.0 of 21 October 2022 [latest update: #22114] on 8 December 2022 at 5:11:32 pm'!ExternalLibrary subclass: #PortMIDILibrary	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'MusicIO-MIDI'!!PortMIDILibrary commentStamp: 'stp 12/8/2022 09:48' prior: 0!A PortMIDILibrary is an external library to interface with the PortMIDI library.Instance Variables	Interface	portCalls!!PortMIDILibrary methodsFor: 'i/o' stamp: 'stp 12/8/2022 16:31'!pm_poll: which	"The MIDI driver input process poll."	<cdecl: uint32_t pm_poll(uint32_t) >		^self externalCallFailed! !!PortMIDILibrary methodsFor: 'i/o' stamp: 'stp 12/8/2022 16:32'!pm_read: which	"The MIDI driver input read prim."	<cdecl: uint64_t pm_read(uint32_t)>		^self externalCallFailed! !!PortMIDILibrary methodsFor: 'i/o' stamp: 'stp 12/8/2022 16:30'!pm_read_controllers: which with: lo with: hi with: array	"Read a range of controllers"	<cdecl: int32_t pm_read_controllers(uint32_t, uint32_t, uint32_t, short *) >		^self externalCallFailed! !!PortMIDILibrary methodsFor: 'i/o' stamp: 'stp 12/8/2022 16:27'!pm_write_data2: which with: d1 with: d2 with: d3	"Write a 2-byte MIDI Command."	<cdecl: int32_t pm_write_data2(uint32_t, char, char) >		^self externalCallFailed! !!PortMIDILibrary methodsFor: 'i/o' stamp: 'stp 12/8/2022 16:26'!pm_write_data3: which with: d1 with: d2 with: d3	"Write a standard 3-byte MIDI Command."	<cdecl: int32_t pm_write_data3(uint32_t, char, char, char) >		^self externalCallFailed! !!PortMIDILibrary methodsFor: 'set-up' stamp: 'stp 12/8/2022 16:21'!pm_close: which	"Close the selected MIDI output device/port."	<cdecl: int32_t pm_close(uint32_t)>		^self externalCallFailed! !!PortMIDILibrary methodsFor: 'set-up' stamp: 'stp 12/8/2022 16:22'!pm_initialize	"Start the MIDI back-end."	"PortMIDILibrary new pm_initialize"		<cdecl: int32_t pm_initialize(void)>		^self externalCallFailed! !!PortMIDILibrary methodsFor: 'set-up' stamp: 'stp 12/8/2022 16:23'!pm_open: which with: direction	"Open the selected MIDI output device/port."		<cdecl: int32_t pm_open(int32_t, uint32_t)>		^self externalCallFailed! !!PortMIDILibrary methodsFor: 'set-up' stamp: 'stp 12/8/2022 16:32'!pm_terminate	"Stop the MIDI back-end."	"PortMIDILibrary new pm_terminate"		<cdecl: int32_t pm_terminate(void)>		^self externalCallFailed! !!PortMIDILibrary methodsFor: 'operations' stamp: 'stp 12/8/2022 16:44'!pm_count_devices	"Answer the number of MIDI ports"	"PortMIDILibrary new pm_count_devices"		<cdecl: int32_t pm_count_devices (void)>		^self externalCallFailed! !!PortMIDILibrary methodsFor: 'operations' stamp: 'stp 12/8/2022 16:42'!pm_default_input_device	"Answer the default MIDI input device/port."	"PortMIDILibrary new pm_default_input_device"	<cdecl: int32_t pm_default_input_device (void)>		^self externalCallFailed! !!PortMIDILibrary methodsFor: 'operations' stamp: 'stp 12/8/2022 17:09'!pm_default_output_device	"Answer the default MIDI output device/port."	"PortMIDILibrary new pm_default_output_device"	<cdecl: int32_t pm_default_output_device (void)>		^self externalCallFailed! !!PortMIDILibrary methodsFor: 'operations' stamp: 'stp 12/8/2022 17:02'!pm_dev_dir: which	"Answer the i/o direction of the selected MIDI output device/port."	<cdecl: int32_t pm_dev_dir(int32_t)>		^self externalCallFailed! !!PortMIDILibrary methodsFor: 'operations' stamp: 'stp 12/8/2022 16:36'!pm_get_name: which	"Answer the name of the selected MIDI output device/port."	<cdecl: const char * pm_get_name(uint32_t)>		^self externalCallFailed! !!PortMIDILibrary methodsFor: 'operations' stamp: 'stp 12/8/2022 16:34'!pm_start_controller_cacheing	"Start MIDI controller cacheing."	<cdecl: int32_t pm_start_controller_cacheing(void)>		^self externalCallFailed! !!PortMIDILibrary methodsFor: 'operations' stamp: 'stp 12/8/2022 16:34'!pm_stop_controller_cacheing	"Stop MIDI controller cacheing."	<cdecl: int32_t pm_stop_controller_cacheing(void)>		^self externalCallFailed! !!PortMIDILibrary methodsFor: 'operations' stamp: 'stp 12/8/2022 16:33'!pm_test	"Test MIDI by playing a note.."		<cdecl: void pm_test (void)>		^self externalCallFailed! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PortMIDILibrary class	instanceVariableNames: ''!!PortMIDILibrary class methodsFor: 'testing' stamp: 'stp 12/8/2022 17:04'!listDeviceTable	"Print a list of devices to the transcript."	"PortMIDILibrary listDeviceTable"	 	| lib num |	lib := PortMIDILibrary new.	num := lib pm_count_devices.	Transcript cr; show: 'MIDI Device Table'; cr.	1 to: num do:		[ :ind |		Transcript show: '# ', ind printString, ' - ',				(lib pm_get_name: ind), ' - ', (lib pm_dev_dir: ind) printString; cr]! !!PortMIDILibrary class methodsFor: 'testing' stamp: 'stp 12/8/2022 17:10'!testANote	"Try playing a note."	"PortMIDILibrary listDeviceTable"		"PortMIDILibrary new pm_count_devices "	"PortMIDILibrary new pm_default_input_device "	"PortMIDILibrary new pm_default_output_device "	"PortMIDILibrary new pm_test"	PortMIDILibrary new pm_test! !!PortMIDILibrary class methodsFor: 'system startup' stamp: 'stp 12/8/2022 14:23'!initialize	"	self initialize	"	Smalltalk addToStartUpList: self after: (Smalltalk classNamed: #CStandardLibrary).! !!PortMIDILibrary class methodsFor: 'instance creation' stamp: 'stp 12/8/2022 14:03'!new	"Make certain to initialize instances."	^super new initialize! !!PortMIDILibrary class methodsFor: 'accessing' stamp: 'stp 12/8/2022 14:28'!moduleName	"Answer the module name"		^'libportmidi.dylib'! !PortMIDILibrary initialize!