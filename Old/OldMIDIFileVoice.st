'From Squeak3.0 of 4 February 2001 [latest update: #3545] on 10 March 2007 at 8:55:40 pm'!IOVoice subclass: #OldMIDIFileVoice	instanceVariableNames: 'tempo time command byte2 byte3 eventList '	classVariableNames: ''	poolDictionaries: ''	category: 'Music-Voices'!!OldMIDIFileVoice commentStamp: '<historical>' prior: 0!This voice class is a file I/O convertor that can transform **OLD** Opcode format MIDI file dumps into EventLists and/or play them in real-time. The messages here will look like:[(MIDIFile1Voice newOn: 'music/st80/5.2/scores/n15.sc') loadOnto: (EventList newNamed: #n3.a)].[(EventList named: #n3.a) edit]Instance variables:	tempo <Integer> the tempo read in from a Midi dump file	time <Integer> the current time	command <Byte> first byte of the command	byte2 <Byte> second byte of the command	byte3 <Byte> third byte of the command	eventList <EventList> the resulting event listThis is still only partially functional in 1.1.!!OldMIDIFileVoice methodsFor: 'accessing'!command	"return the command byte of the current event"	^command! !!OldMIDIFileVoice methodsFor: 'accessing'!command: aValue	"set the command byte"	command _ aValue! !!OldMIDIFileVoice methodsFor: 'accessing'!defaultEventClass	"What kind of Events do i normally use?"	^MusicEvent! !!OldMIDIFileVoice methodsFor: 'accessing'!eventList: aValue	"plug in an event list"	eventList _ aValue! !!OldMIDIFileVoice methodsFor: 'accessing'!tempo	"return my default tempo"	^tempo! !!OldMIDIFileVoice methodsFor: 'accessing'!tempo: aValue	"set my tempo"	tempo _ aValue! !!OldMIDIFileVoice methodsFor: 'read/write'!printEventOn: aFile	"print out 1 MIDI event by its instance variables"	| str |	str _ WriteStream on: (String new: 12).	time printOn: str base: 16.  str nextPut: $	.	command printOn: str base: 16.  str nextPut: $	.	byte2 printOn: str base: 16.  str nextPut: $	.	command > 127 ifTrue:		[byte3 printOn: str base: 16.  str nextPut: $	.	 ].	aFile nextPutAll: (str contents); nextPut: Character cr! !!OldMIDIFileVoice methodsFor: 'read/write'!readEvent	"read 1 MIDI event into instance variables, parse out running events"	"unbuffered version."	| byte |	time _ stream next.	time > 127 ifTrue:   "overlength encoded times"		[ time _ (time - 127) bitShift: 8.		time _ time + (self next) ].	byte _ stream next.	byte > 127 ifTrue:  	"real event"		[ command _ byte.		byte2 _ stream next.		(command bitAnd: 16rF0) = 16rC0 			ifTrue: [ byte3 _ nil ]			ifFalse: [  "not a command code"				byte3 _ stream next ].		(command bitAnd: 16rFF) = 16rFF ifTrue: 			[ self readMetaEvent ] ]	ifFalse: 			"not a real event, running status"		[ byte2 _ byte.		byte3 _ stream next ]! !!OldMIDIFileVoice methodsFor: 'read/write'!readHeader	"strip MIDI header from binary file."	| size word |	size _ stream size.	Transcript show: 'size: ', size printString. 	word _ stream nextWord.	(word = 16rFF) ifTrue: [		byte2 _ stream next.		byte3 _ stream next.		self readMetaEvent ]	ifFalse: [		self error: 'unknown header: ', word printString ]! !!OldMIDIFileVoice methodsFor: 'read/write'!readMetaEvent	"parse a MIDI meta event - tempo or end-of-track"	| word |	word _ (byte2 bitShift: 8) bitOr: byte3.	(word = 16r5002) ifTrue: [  "tempo meta event"		tempo _ stream nextWord.		Transcript show: '  	tempo: ', tempo printString; cr ]	ifFalse: [ (word = 16r2F00) ifTrue: [  "end of track"		Transcript show: 'end of track  	' ]		ifFalse: [			self error: 'unknown meta event', word printString ] ]! !!OldMIDIFileVoice methodsFor: 'read/write'!readOnto: anEventList	"load a MIDI file into an EventList."	"(MidiStream newOn: 'Scores:n3.a.sc') loadOnto: (EventList newNamed: #n3.a)	(EventList named: #n3.a) setDurations	(EventList named: #n3.a) inspect"	| t temp event |	self readHeader.	anEventList at: #bytes put: self size; 			at: #tempo put: tempo; 			code: #noteOnOff.	t _ 0.	temp _ ((24 * 60) / (tempo / 128)) asInteger. 	[stream atEnd] whileFalse:		[self readEvent.		time _ time * temp.		t _ t + time.			"sum MIDI delta times"		(command bitAnd: 16rF0) = 16rC0 ifFalse:			[ event _ self defaultEventClass 					pitch: byte2 ampl: byte3 voice: command.			 anEventList add: event at: t]].	anEventList  at: #size put: (anEventList events) size.	Transcript show: ((anEventList events) size) printString, ' events'; cr! !!OldMIDIFileVoice methodsFor: 'play/record'!play	"Play MIDI data from a file starting now."	"Use like (MIDIFileVoice fileNamed: 'piece1.sc') play."	self checkMidiHeader.	self openData.	eventList _ self readOnto: (EventList new)	eventList schedule.	eventList play! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OldMIDIFileVoice class	instanceVariableNames: ''!!OldMIDIFileVoice class methodsFor: 'instance creation'!newOn: fileName	"open an new binary MIDI file for R/W."	| me |	me _ self new.	me stream: ((Filename named: fileName) readStream binary).	^me! !